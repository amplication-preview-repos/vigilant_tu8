/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Username } from "./Username";
import { UsernameCountArgs } from "./UsernameCountArgs";
import { UsernameFindManyArgs } from "./UsernameFindManyArgs";
import { UsernameFindUniqueArgs } from "./UsernameFindUniqueArgs";
import { CreateUsernameArgs } from "./CreateUsernameArgs";
import { UpdateUsernameArgs } from "./UpdateUsernameArgs";
import { DeleteUsernameArgs } from "./DeleteUsernameArgs";
import { UsernameService } from "../username.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Username)
export class UsernameResolverBase {
  constructor(
    protected readonly service: UsernameService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Username",
    action: "read",
    possession: "any",
  })
  async _usernamesMeta(
    @graphql.Args() args: UsernameCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Username])
  @nestAccessControl.UseRoles({
    resource: "Username",
    action: "read",
    possession: "any",
  })
  async usernames(
    @graphql.Args() args: UsernameFindManyArgs
  ): Promise<Username[]> {
    return this.service.usernames(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Username, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Username",
    action: "read",
    possession: "own",
  })
  async username(
    @graphql.Args() args: UsernameFindUniqueArgs
  ): Promise<Username | null> {
    const result = await this.service.username(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Username)
  @nestAccessControl.UseRoles({
    resource: "Username",
    action: "create",
    possession: "any",
  })
  async createUsername(
    @graphql.Args() args: CreateUsernameArgs
  ): Promise<Username> {
    return await this.service.createUsername({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Username)
  @nestAccessControl.UseRoles({
    resource: "Username",
    action: "update",
    possession: "any",
  })
  async updateUsername(
    @graphql.Args() args: UpdateUsernameArgs
  ): Promise<Username | null> {
    try {
      return await this.service.updateUsername({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Username)
  @nestAccessControl.UseRoles({
    resource: "Username",
    action: "delete",
    possession: "any",
  })
  async deleteUsername(
    @graphql.Args() args: DeleteUsernameArgs
  ): Promise<Username | null> {
    try {
      return await this.service.deleteUsername(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
